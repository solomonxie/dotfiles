#! /bin/bash
#
# MAINTAINER: Solomon Xie <solomonxiewise@gmail.com>
# ENVIRONMENT: Ubuntu / Raspbian / MacOS
#
# Description: Additional configs for zshrc, which aren't good for public.
#
# Env Variables, paths
# Some would be imported here by other programms automatically
# etc., cat 'expot path=...' > ~/.zshrc
# 
#


#------------------------------------------------------
#           Shared Custom Functions
#------------------------------------------------------

do_read_flags(){
    # Set variables from flag passed to this function
    while [ $# -gt 0 ] ;do
        case "$1" in
            --os)
                OS=$2 
                shift 2;;
            --src)
                SRC=$2 
                shift 2;;
            --as | -u)
                as_user=$2
                shift 2;;
            --password | -p)
                password=$2
                shift 2;;
        esac
    done
}

get_os(){
    if [ -x "$(command -v lsb_release)" ]; then #Linux
        info=$(lsb_release -si)
    elif [ -x "$(command -v sw_vers)" ]; then #MacOS
        info=$(sw_vers -productName)
    elif [ -e /etc/os-release ]; then #Linux (not docker)
        info=$(cat /etc/os-release |grep NAME)
    elif [ -x "$(command -v uname)" ]; then #Linux, docker & Others
        info=$(uname -a)
    fi
    case "$(echo $info | tr '[:upper:]' '[:lower:]')" in
        *mac*) OS="mac" ;;
        *raspbian* | *raspberrypi*) OS="raspbian" ;;
        *ubuntu*) OS="ubuntu" ;;
    esac
    echo $OS
}


do_by_os(){
    case $(get_os) in
        ubuntu)
            echo "CURRENT Linux Distribution: [  Ubuntu  ].";;
        raspbian)
            echo "CURRENT Linux Distribution: [  Raspbian  ].";;
        mac)
            echo "CURRENT OS: [  Mac OS X  ].";;
    esac
}


do_add_admin(){
    as_user=${as_user:-$MYOS}
    password=${password:-"${MYOS}123"}
    if [ ! "$as_user" = "$(cat /etc/passwd |cut -d':' -f1)" ]; then
        useradd -s /bin/bash $as_user && \
        usermod -aG sudo $as_user && \
        echo -e "${password}\n${password}" | passwd $as_user && \
        ME="$as_user"

        # Make Home directory
        mkdir -p /home/$as_user
        chown -R $as_user:$as_user /home/$as_user

        # Setup SSH for Admin login
        sudo -u $as_user mkdir -p /home/$as_user/.ssh
        cp /root/.ssh/authorized_keys /home/$as_user/.ssh/
        chown -R $as_user:$as_user /home/$as_user/.ssh
    fi
    #su - $as_user && echo '[ OK ]'
}


#------------------------------------------------------
#           Export Custom Env Variables
#------------------------------------------------------

do_read_flags "$@"

export MYOS=${OS:-$(get_os)}
ME=${SUDO_USER:-$(id -un)}
if [ $ME = "root" ];then
    do_add_admin
    echo "[ NEW USER <$ME> HAS SUCCESSFULLY ADDED, ]"
    echo "[ PLEASE RE-RUN THIS SCRIPT AGAIN WITH NEW USER. ]"
    exit 0;
fi

HOUSE="`cat /etc/passwd |grep ^${ME}: | cut -d: -f 6`"
#HOUSE="`cat /etc/passwd |awk -F ':' "/$ME/" '{print $(NF-1)}'`"
export HOUSE=${HOUSE:-$HOME}
export SRC=${SRC:-"$HOUSE/dotfiles"}

# Download Repo if not exists
if [ ! -e $HOUSE/dotfiles ]; then
    git clone "git@github.com:solomonxie/dotfiles.git" $HOUSE/dotfiles
fi

cd $HOUSE/dotfiles
# Prompt to ask for sudo password
sudo echo ""