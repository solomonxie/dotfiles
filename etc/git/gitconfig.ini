# This is Git's per-user configuration file.
[core]
    editor = /usr/bin/vi
	# pager = diff-so-fancy | less --tabs=4 -RFX
    # pager = delta
[diff]
	context = 0

;========Git-Delta=========
;https://github.com/dandavison/delta
[delta]
    plus-style = "syntax #012800"
    minus-style = "syntax #340001"
    syntax-theme = Monokai Extended
    navigate = true
    side-by-side = true
    line-numbers-left-format = ""
    line-numbers-right-format = "â”‚ "
[interactive]
    diffFilter = delta --color-only
;========Git-Delta=========

[color]
    ui = true
[credential]
    helper = cache
[commit]
    template = ~/myconf/dotfiles/etc/git/git-message
[diff]
    tool = nvimdiff
; Used when executing `git difftool master`
[difftool "nvimdiff"]
    cmd = "nvim -d \"$LOCAL\"  \"$REMOTE\""
[merge]
    tool = nvimdiff

; Used when having conflict and executing `git mergetool`
[mergetool "nvimdiff"]
    cmd = "nvim -d \"$LOCAL\" \"$BASE\" \"$REMOTE\" \"$MERGED\" -c '$wincmd w' -c 'wincmd J' "

[pull]
	rebase = false
[alias]
    # Shortening aliases
    ci = commit
    co = checkout
    br = branch
    up = push
    dn = pull

    # Feature improving aliases
    st = status -sb
    a = add -p
    type = cat-file -t
    dump = cat-file -p

    # Working with branches
    branchname = "!git rev-parse --abbrev-ref HEAD"
    # Push the current branch to the remote
    pub = "!git push origin $(git branchname)"
    pushall = "!git remote | xargs -L1 git push --all"
    # Pull from the origin
    sync = "!git pull origin $(git branchname)"
    # Fetch all remote branches
    # fetchall = "!git branch -r | grep -v '\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done"
    # Get the root path of the project
    root = "!git rev-parse --show-toplevel"
    first = "!git rev-list --max-parents=0 HEAD"

    # Composite functionalities
    unstage = reset HEAD --
    unset = reset --hard

    # Stats
    last = log -1 HEAD
    rank = shortlog -sn --no-merges
    count = "!git diff --cached --numstat | wc -l"
    dirty = "!git diff master --name-only |cat"
    quickcommit = "!git commit -m \"updated on branch [$(git branchname)]\""
    untracked = "!git ls-files . --exclude-standard --others"
    changedfiles = "!git diff-tree --no-commit-id --name-only -r"

    # UI Improvements
    logs = log --graph --pretty='format:%C(red)%d%C(reset) %C(yellow)%h%C(reset) %ar %C(green)%aN%C(reset) %s'
    logc = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    logp = log --graph --pretty='format:%C(red)%d%C(reset) %C(yellow)%h%C(reset) %ar %C(green)%aN%C(reset) %s'
    logt = log --stat --since='1 Day Ago' --graph --pretty=oneline --abbrev-commit --date=relative
    history = log --follow -p
    commits = log --pretty=oneline

    # !DELETES
    delete-branch = "!git branch --merged | grep -v '*' | xargs -n 1 git branch -d"
    delete-cache = "!git rm --cached --ignore-unmatch"
    delete-cred = "!git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch /path/to/file $(git first)..HEAD'"

    # CHANGE HISTORY
    # change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" \$@; }; f"
    # Change email in history
    # !git filter-branch -f --env-filter "GIT_AUTHOR_EMAIL='new_email'; GIT_COMMITTER_EMAIL='old_email';" HEAD
