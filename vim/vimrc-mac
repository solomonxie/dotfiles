" Owner: Solomon Xie
" Email: solomonxiewise@gmail.com
" Enviroment: MacOS Sierra / Raspbian / Ubuntu
" Preload dependencies:
"     # [Plugins Manager: Vim-Plug]
"       $ curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"     # [Plug  dependencies]
"       $ brew install ctags
"       $ brew install --HEAD universal-ctags/universal-ctags/universal-ctags
" Manual commands (type in vim, sodu mode required):
"     :PluginInstall


" [Plugins Manager vim-plug]
call plug#begin('~/.vim/plugged')
    " [    UI     ]

        "<STATUS-BAR>
            "Plug 'itchyny/lightline.vim' "beautiful status line
            "Plug 'Lokaltog/vim-powerline' "fancy status line (python required)
            Plug 'vim-airline/vim-airline'
            Plug 'vim-airline/vim-airline-themes'

        " <Syntax Highlighting>
        "Plug 'vim-syntastic/syntastic'
        "Plug 'vim-python/python-syntax'
        Plug 'hdima/python-syntax'   "better than vim-python's 
        "Plug 'pfdevilliers/Pretty-Vim-Python'   "not working
        "Plug 'python-mode/python-mode'    "Deprecated

    " [    File Browsing   ]

        "<Fuzzy File Search>
        " <COMMAND-T>
        "Plug 'wincent/command-t'    "VIM only (Ruby required)
        " <fzf>
        Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
        Plug 'junegunn/fzf.vim'


        "<NERDTREE>
        Plug 'scrooloose/nerdtree'          " File tree manager
        Plug 'jistr/vim-nerdtree-tabs'      " enhance nerdtree's tabs
        Plug 'ryanoasis/vim-devicons'       " add beautiful icons besides files
        "Plug 'Xuyuanp/nerdtree-git-plugin'  " display git status within Nerdtree
        "Plug 'tiagofumo/vim-nerdtree-syntax-highlight' " enhance devicons

        "<Tags>
        Plug 'majutsushi/tagbar'   " (ctags required)

        " <Git>
        "Plug 'tpope/vim-fugitive'    " easy commands to do git
        "Plug 'easymotion/vim-easymotion'

    " [   INSERTION    ]

        "<Snippets> (python required)
            "Plug 'MarcWeber/vim-addon-mw-utils'
            "Plug 'tomtom/tlib_vim'
            "Plug 'garbas/vim-snipmate'
            "Plug 'honza/vim-snippets' "some common snippets (python required)

        "<Bracket Closing>
            "Plug 'tpope/vim-surround'
            Plug 'Townk/vim-autoclose'

        "<Indentation>
            "Plug 'nathanaelkane/vim-indent-guides'
            Plug  'Yggdroot/indentLine'    "Beautiful indent lines

        "<Folding>
            Plug 'tmhedberg/SimpylFold'   "improving folding

        "<Completion>
            "Plug 'valloric/youcompleteme'    "hard to build
            "Plug 'davidhalter/jedi-vim'      "complicated, need to work with others
            "Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}   "not working
            "Plug 'rkulla/pydiction'   " not work as expected
            "Plug 'ervandew/supertab'
            
            " <Deoplete.nvim>
            if has('nvim')
                Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
            else
                Plug 'Shougo/deoplete.nvim'
                Plug 'roxma/nvim-yarp'    " ??
                Plug 'roxma/vim-hug-neovim-rpc'  " Framework neovim plugins to work on vim
            endif
            Plug 'zchee/deoplete-jedi'    " Python completion
            Plug 'Shougo/deoplete-clangx'   " C/C++ completion

    "<Session>
        Plug 'tpope/vim-obsession'


call plug#end()


" General Builtin Settings -----------{
"function Builtin_settings_general()
    filetype plugin indent on    " [Essential]
    set nocompatible   " be iMproved, required
    colorscheme gruvbox 
    syntax enable 
    set ignorecase "Case Insensitive
    set smartcase  "Also detects specified case
    set background=dark
    set hidden " 设置Buffer缓冲区允许不保存时切换buffer
    set number "show line number
    set cursorline "highlight current line with cursor on
    set mouse=a  "设置鼠标滚动为All，即在tmux中的vim也能滚动 （但是选中文字自动会进入Visual模式）
    "set paste   "设置可以直接用ctrl+c ctrl+v复制粘贴 其实没什么区别 只不过不用在insert模式而已
    set showcmd " show keypress at right-bottom
    set backspace=2 "backspace over everything in insert mode
    set autoindent "换行时自动缩排 同时对应的还有其它两种模式 smartindent, cindent
    set tabstop=4 "设定tab宽度为4个字符
    set shiftwidth=4 "设定自动缩进为4个字符
    set expandtab "用space替代tab的输入 取消的话 就用set noexpandtab "不用space替代tab的输入
    set encoding=utf8  "设置默认编码
    retab "打开文件时自动转换所有tab为空格
"endfunction
" }


" Advanced Builtin Settings  -----------{
"function Builtin_settings_advanced()
    "<Taging>
    set tags=tags  "Plugin: Ctags  
    "<Folding>
    set foldenable              " 开始折叠
    set foldmethod=syntax       " 设置语法折叠
    set foldnestmax=1
    set foldcolumn=0            " 设置折叠区域的宽度
    setlocal foldlevel=1        " 设置折叠层数
    set foldlevelstart=99       " 打开文件是默认不折叠代码
    "set foldclose=all          " 设置为自动关闭折叠
    " 用空格键来开关折叠
    "nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
    "nnoremap <return> za

    " <Language support>
    "if ! has('vim')    "for VIM only 
    "    "set pyxversion=2
    "    if has('python3')
    "       set pyx=3
    "    else
    "       set pyx=2
    "    endif
    "endif
"endfunction
" }


" Filetype based builtin Autocomplete [omnifunc] ----{
"function Builtin_settings_filetype()
    filetype plugin on
    au FileType python setl ofu=pythoncomplete#CompletePHP
    "au FileType php setl ofu=phpcomplete#CompletePHP
    "au FileType ruby,eruby setl ofu=rubycomplete#Complete
    "au FileType html,xhtml setl ofu=htmlcomplete#CompleteTags
    "au FileType c setl ofu=ccomplete#CompleteCpp
    "au FileType css setl ofu=csscomplete#CompleteCSS
"endfunction
" }


" Key Mapping ----------------------------{
"call Builtin_settings_key_mapping()
    "<Leader key>
        let mapleader = ','

    "<Common Keys>
        inoremap <C-c> <Esc>:nohl<CR><ESC>
        nnoremap <C-c> <ESC>:nohl<CR><ESC>
        inoremap <C-s> <ESC>:w<CR><ESC>
        vnoremap <C-s> <ESC>:w<CR><ESC>
        nnoremap <C-s> <ESC>:w<CR><ESC>
        vnoremap <C-x> <ESC>:x<CR><ESC>
        nnoremap <C-x> <ESC>:x<CR><ESC>
        "nnoremap <leader>qw :q<CR>
        "vnoremap <leader>qw :q<CR>

    "<Vim-Plug>
        nnoremap <leader>i :PlugInstall<CR>
        
    "<Clipboard>
        " 复制到系统剪切板
        nnoremap <leader>y "+Y
        vnoremap <leader>y "+y
        " 从系统剪切板中粘贴到当前位置
        nnoremap <leader>p "+P
        vnoremap <leader>p "+p

    "<Buffer>
        nnoremap <leader>h :bp<CR><ESC>
        nnoremap <leader>l :bn<CR><ESC>
        nnoremap <leader>q :bd<CR><ESC>
        vnoremap <leader>q :bd<CR><ESC>

    "<Folding>
        nnoremap <space> za
        nnoremap <leader><space> zR
        nnoremap <leader><return> zM

    "<Filetype based Mappings>----{
        " Get current filetype -> :echo &filetype or as variable &filetype
        " [ Builds / Compiles / Interpretes  ]
        "<C Compiler>
        autocmd FileType c nnoremap <buffer> <C-i> :w<CR>:!gcc % && ./a.out <CR>
        "<C++ Compiler>
        autocmd FileType cpp nnoremap <buffer> <C-i> :w<CR>:!g++ % && ./a.out <CR>
        "<Python Interpreter>
        autocmd FileType python nnoremap <buffer> <C-i> :w<CR>:!python % <CR>
        "<Bash Script>
        autocmd FileType sh nnoremap <buffer> <C-i> :w<CR>:!bash % <CR>
        "<RCs> (Configs)
        autocmd FileType vim,tmux nnoremap <buffer> <C-i> :w<CR>:source % <CR>
        autocmd FileType zsh nnoremap <buffer> <C-i> :w<CR>:!source % <CR>
        "<Executable>
        "nnoremap <buffer> <C-i> :!./% <CR>
        "nnoremap <buffer> <C-i> :! %:p <CR>
    " }

    "<Omni-autocomplete> Vim自带的Omni自动补全
        inoremap <C-d> <C-x><C-l>
        "inoremap ' ''<Esc>i
        "inoremap " ""<Esc>i
        "inoremap ( ()<Esc>i
        "inoremap [ []<Esc>i
        "inoremap { {}<Esc>i
"endfunction
" }



" Search Highlighting -----------{
    " >>
        highlight Search guibg='Purple' guifg='NONE'
        highlight IncSearch gui=underline,bold guifg=White guibg=Red3
        "highlight IncSearch ctermbg=black ctermfg=yellow 
    " 鼠标无动作时取消高亮
        autocmd cursorhold * set nohlsearch
    " 当输入查找命令时，再启用高亮
        noremap n :set hlsearch<cr>n
        noremap N :set hlsearch<cr>N
        noremap / :set hlsearch<cr>/
        noremap ? :set hlsearch<cr>?
        noremap * *:set hlsearch<cr>
    " 括号匹配自动高亮
        "highlight MatchParen cterm=underline ctermbg=NONE ctermfg=NONE"
" }


" Swap files (for recovery) --------{
    set swapfile    "enable swap file
    set directory=/tmp    "set swp file directory. 
    set updatecount=20     "save swp file every amount of characters
    " ▼ update also check cursor-holds and other functions, bit expensive one.
    set updatetime=4000   "save swap file every amount of ms
" }


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"==============================PLUGIN SETTINGS=================================
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" <IndentLine>--------{
    let g:indentLine_enabled = 1
    let g:indentLine_char='│'
    let g:indentLine_conceallevel = 2
    let g:indentLine_color_term = 239
    let g:indentLine_concealcursor = 'inc'
    "let g:indentLine_setColors = 0
    "let g:indentLine_setConceal = 0
" }

" <pydiction>-------------{
    "let g:pydiction_location = '$HOME/.vim/plugged/pydiction/complete-dict'
    "let g:pydiction_menu_height = 7
" }

" <Deoplete>--------------{
    " Enable at startup
        let g:deoplete#enable_at_startup = 1
    " Set multiple options
        call deoplete#custom#option({
        \ 'auto_complete_delay': 0,
        \ 'smart_case': v:true,
        \ })
    " Deoplete-jedi
        let g:deoplete#sources#jedi#enable_typeinfo = 0
        let g:deoplete#sources#jedi#show_docstring = 0
    " deoplete-clangx
        " Change clang binary path
        "call deoplete#custom#var('clangx', 'clang_binary', '/usr/local/bin/clang')
        " Change clang options
        "call deoplete#custom#var('clangx', 'default_c_options', '')
        "call deoplete#custom#var('clangx', 'default_cpp_options', '')
" }


" <SimpylFold>------------{
    "let g:SimpylFold_docstring_preview = 1
" }

" <Tagbar>--------------{
    let tagbar_autofocus = 1   "Focus on tagbar window when open
    let tagbar_autoclose = 1   "Close tagbar window when select tag
    "----Key mapping----
    nnoremap <leader>t :TagbarToggle<CR>
    "nnoremap <leader>t :TagbarOpen f<CR>
" }

" <Command-T File Searching>-----------{
    "----Key mapping----
    "nnoremap <leader>/ :CommandT<CR>
    "nnoremap <leader>c :CommandT<CR>
    "let g:CommandTMaxDepth = 10
    "let g:CommandTMaxFiles=2000
    "let g:CommandTSuppressMaxFilesWarning = 1
    "set wildignore+=".*, *.dat, *.o, *.pyc, */.git, *.pdf, *.app, *.jpg, *.png, *.gif, *.doc, *.docx"
" }

" <fzf> ------------{
    "---Key Mapping---
    nnoremap <leader>/ :Files<CR>
    "nnoremap <C-e> :Buffers<CR>
    "let g:fzf_action = { 'ctrl-e': 'edit' }
" }

" <Python-Mode>-------{
    "let g:pymode_python = 'python3'
" }

" <Python-syntax>-----{
    let g:python_highlight_all = 1
" }

" Jedi Settings =============={{{
    let g:jedi#force_py_version=2.7
" }}}


" <Vim-Indent-Guides>----------------------{
    "let g:indent_guides_enable_on_vim_startup = 1
    "set ts=1 sw=1 et
    "let g:indent_guides_start_level=2
    "let g:indent_guides_size=1
    "hi IndentGuidesOdd  ctermbg=black
    "hi IndentGuidesEven ctermbg=darkgrey
" }


" <Status-Line>-----------{
    " @airline
        set t_Co=256      "在windows中用xshell连接打开vim可以显示色彩
        let g:airline#extensions#tabline#enabled = 1   " 是否打开tabline
    "这个是安装字体后 必须设置此项" 
        let g:airline_powerline_fonts = 1
        set laststatus=2  "永远显示状态栏
        let g:airline_theme='bubblegum' "选择主题
        let g:airline#extensions#tabline#enabled=1  "显示窗口tab和buffer
        "let g:airline#extensions#tabline#left_sep = ' '  "separater
        "let g:airline#extensions#tabline#left_alt_sep = '|'  "separater
        "let g:airline#extensions#tabline#formatter = 'default'  "formater
        let g:airline_left_sep = '▶'
        let g:airline_left_alt_sep = '❯'
        let g:airline_right_sep = '◀'
        let g:airline_right_alt_sep = '❮'
        "let g:airline_symbols.linenr = '¶'
        "let g:airline_symbols.branch = '⎇'
    " @lightline
        "set laststatus=2 " startup the lightline.vim 
        "let g:lightline = { 'colorscheme': 'powerline', } 
        "set status-line's color scheme
    " @powerline
        "set laststatus=2
        "set t_Co=256
        "let g:Powerline_symbols= 'unicode'
        "set encoding=utf8
" } 



" Plugin Settings Nerdtree -------------------{
"function Plugin_settings_NerdTree()
    " Key bindings
        " 将焦点放在树上（无论何种情况）
        "nnoremap <leader>f :NERDTreeFocus<CR>
        " 开/关文件菜单
        nnoremap <leader>f :NERDTreeToggle<CR>  
        " 向右向左切换tab
        nnoremap <C-h> gt
        nnoremap <C-l> gT
        " 按leader+t 打开新tab
        "nnoremap <leader>t :tabe<CR>
        " 按leader+q 关闭当前tab
        "nnoremap <leader>c :tabc
    ">>

        let NERDTreeQuitOnOpen=1   " Close NERDtree when files was opened
        let NERDTreeMinimalUI=1    " Start NERDTree in minimal UI mode (No help lines)
        let NERDTreeDirArrows=1    " Display arrows instead of ascii art in NERDTree
        let NERDTreeChDirMode=2    " Change current working directory based on root directory in NERDTree
        let g:NERDTreeHidden=1     " 不显示隐藏文件
        let NERDTreeWinSize=30     " Initial NERDTree width
        let NERDTreeAutoDeleteBuffer = 1  " Auto delete buffer deleted with NerdTree
        "let NERDTreeShowBookmarks=0   " Show NERDTree bookmarks
        let NERDTreeIgnore = ['\.pyc$', '\.swp', '\.swo', '__pycache__']   " Hide temp files in NERDTree
        "let g:NERDTreeShowLineNumbers=1  " 显示菜单上行号
    " 打开vim时如果没有文件自动打开NERDTree
        "autocmd vimenter * if !argc()|NERDTree|endif
    " 或, 自动开启Nerdtree
        "autocmd vimenter * NERDTree  
    " 当NERDTree为剩下的唯一窗口时自动关闭
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    " 设置树的显示图标
        let g:NERDTreeDirArrowExpandable = '▸'
        let g:NERDTreeDirArrowCollapsible = '▾'

    "NERDTREE-GIT
    let g:NERDTreeIndicatorMapCustom = {
        \ "Modified"  : "✹",
        \ "Staged"    : "✚",
        \ "Untracked" : "✭",
        \ "Renamed"   : "➜",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "✖",
        \ "Dirty"     : "✗",
        \ "Clean"     : "✔︎",
        \ 'Ignored'   : '☒',
        \ "Unknown"   : "?"
    \ }

    "NERDTree-Tabs
        "let g:nerdtree_tabs_open_on_console_startup=1 "设置打开vim的时候默认打开tabs
    "Nerdtree-devicons
        "set guifont=DroidSansMono_Nerd_Font:h11
    "Nerdtree-syntax-highlighting
        "let g:NERDTreeDisableFileExtensionHighlight = 1
        "let g:NERDTreeDisableExactMatchHighlight = 1
        "let g:NERDTreeDisablePatternMatchHighlight = 1
        "let g:NERDTreeFileExtensionHighlightFullName = 1
        "let g:NERDTreeExactMatchHighlightFullName = 1
        "let g:NERDTreePatternMatchHighlightFullName = 1
        "let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
        "let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
        "let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
"endfunction
" }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"==============================FUNCTION CALLINGS=================================
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"call Builtin_settings_general()
"call Builtin_settings_advanced()
"call Builtin_settings_filetype()
""call Builtin_settings_key_mapping()
"call Plugin_settings_NerdTree()
