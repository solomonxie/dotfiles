" Dependencies:
"     " [Plugins Manager: Vim-Plug]
"           $ curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"           https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"     " [Plug  dependencies]
"           $ brew install ctags
"           $ brew install --HEAD universal-ctags/universal-ctags/universal-ctags
"
" Commands:
"     - Install plugins: ":PlugInstall"
"     - Check current filetype: ":echo &filetype"
"     - Build current file: "Ctrl-u"
"
" Performance:
"   vim --startuptime /tmp/vim-time.log +qall && cat /tmp/vim-time.log |sort -nrk 2
"   "or
"   :Startuptime


" [  Plugins Manager vim-plug  ]
call plug#begin('~/.vim/plugged')
    " [    UI / Appearence     ]

        "<Theme>
            Plug 'morhetz/gruvbox'

        "<STATUS-BAR>
            Plug 'vim-airline/vim-airline'
            Plug 'vim-airline/vim-airline-themes'

        "<Syntax Highlighting>
            Plug 'hdima/python-syntax'   "Most stable highlighting

        "<Window>
            "Plug 'TaDaa/vimade'  "Dim inactive windows
            "Plug 'vim-scripts/ZoomWin' "Zoom In/Out (Error)
            Plug 'dhruvasagar/vim-zoom'

        "<Terminal>
            "Plug 'kassio/neoterm'

    " [    Browsing   ]

        "<Fuzzy File Search>
            " <fzf>
            Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
            Plug 'junegunn/fzf.vim'

            "<NetRW>
            Plug 'tpope/vim-vinegar'      "Netrw enhancement

        "<NERDTREE>
            Plug 'scrooloose/nerdtree'          " File tree manager
            Plug 'jistr/vim-nerdtree-tabs'      " enhance nerdtree's tabs
            Plug 'ryanoasis/vim-devicons'       " add beautiful icons besides files

        "<Bookmarks>
            "Plug 'MattesGroeger/vim-bookmarks'  "Manage bookmarks

        "<nnn>
            Plug 'mcchrish/nnn.vim'

        "<Ranger>
            Plug 'francoiscabrol/ranger.vim'
            if has('nvim')
                Plug 'rbgrouleff/bclose.vim'
            endif

        "<Tags> (ctags required)
            Plug 'majutsushi/tagbar'   "Display
            Plug 'ludovicchabant/vim-gutentags' "Manage tags (auto)
            "Plug 'craigemery/vim-autotag'  "Navigate (manually gen tags)

        "<Git>
            "Plug 'jreybert/vimagit'  "Much easier with Git
            "Plug 'tpope/vim-fugitive' "work with fzf for :Commits
            Plug 'iberianpig/tig-explorer.vim' "faster/prettier (tig required)

        "<Documentation>
            "Plug 'powerman/vim-plugin-viewdoc' "K-preview improvement

    " [   EDIT    ]

        "<Autocomplete>
            "[Snippets]  -> Python required
                Plug 'SirVer/ultisnips'  " Track the engine.
                Plug 'honza/vim-snippets'  " Snippets are separated from the engine.
            "[Deoplete]
                Plug 'Shougo/deoplete.nvim'
                Plug 'zchee/deoplete-jedi'    " Python completion source
                Plug 'Shougo/deoplete-clangx'   " C/C++ completion source
                if !has('nvim') ">> For vim only
                    Plug 'roxma/nvim-yarp' " Nvim Remote Plugin Framework
                    Plug 'roxma/vim-hug-neovim-rpc'  ">> to work with Vim8
                endif
                let g:deoplete#enable_at_startup = 1
                let g:deoplete#num_processes = 1

        "<Comment>
            Plug 'scrooloose/nerdcommenter'

        "<Code Check>
            Plug 'vim-syntastic/syntastic' "Static Code Check

        "<Bracket Closing>
            Plug 'jiangmiao/auto-pairs' "Smartest (bug:)

        "<Indentation>
            Plug  'Yggdroot/indentLine'    "Beautiful indent lines

        "<Trailing Whitespace>
            Plug 'bronson/vim-trailing-whitespace'

        "<Undo>
            Plug 'mbbill/undotree'

    " [   SESSION    ]
        "Plug 'tpope/vim-obsession'  "For Tmux to restore VIM sessions

    " [   PERFORMANCE    ]
        Plug 'tweekmonster/startuptime.vim'   "VIM loading analysis

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"==============================LAZY LOADING=================================
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" [  Lazy Load Plugins  ]-----------{
    "<UltiSnips>  -> Very slow
    "augroup load_us
        "autocmd!
        "autocmd InsertEnter * call plug#load('ultisnips') | autocmd! load_us
    "augroup END
" }


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"==============================PLUGIN SETTINGS=================================
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PluginSettings()
    echo ""
endfunction


" <Vim Obsession>--------{
    " Auto record session on VIM's exit (No space between multiple files)
        "autocmd VimLeave * :Obsession /tmp/obsession.vim
        "autocmd VimLeave *.py,*.json :Obsession /tmp/obsession.vim
" }


" <Vim-auto-pairs>--------{
    let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', "`":"`", '```':'```', '"""':'"""', "'''":"'''"}
    "Fly mode
    let g:AutoPairsFlyMode = 0
    "Options
    let g:AutoPairsMultilineClose = 0 "Solve bug of deleting pair
    "let g:AutoPairsMapBS = 0
    "let g:AutoPairsMapCh = 0
    let g:AutoPairsMapCR = 0  "Has bug for nested level
    "let g:AutoPairsCenterLine = 0
    "let g:AutoPairsMapSpace = 0
" }


" <UltiSnips>--------{
    " Trigger configuration.
    " Do not use <tab> if you use YouCompleteMe.
    let g:UltiSnipsExpandTrigger="<Tab>"
    let g:UltiSnipsJumpForwardTrigger="<C-n>"
    let g:UltiSnipsJumpBackwardTrigger="<C-p>"

    " If you want :UltiSnipsEdit to split your window.
    let g:UltiSnipsEditSplit="vertical"

    " Specify snippets locations
    let g:UltiSnipsSnippetDirectories=["~/dotfiles/snippets", "~/.vim/plugged/vim-snippets/snippets", "~/.vim/plugged/vim-snippets/UltiSnips"]
" }


" <Indentline>--------{
    let g:indentLine_enabled = 1
    let g:indentLine_char='│'
    let g:indentLine_conceallevel = 2
    let g:indentLine_color_term = 239
    let g:indentLine_concealcursor = 'inc'
    "let g:indentLine_setColors = 0
    "let g:indentLine_setConceal = 0
    autocmd Filetype json let g:indentLine_enabled = 0  ">> Huge bug for JSON input
" }


" <PyDiction>-------------{
    "let g:pydiction_location = '$HOME/.vim/plugged/pydiction/complete-dict'
    "let g:pydiction_menu_height = 7
" }


" <Vimade>-------------{
    "let g:vimade.fadelevel=0.3
    "let g:vimade.rowbufsize=30
    "let g:vimade.colbufsize=30
    "let g:vimade.checkinterval=500
" }


" <Syntastic>-------------{
    let g:syntastic_enable_signs = 1
    let g:syntastic_error_symbol='✗'
    let g:syntastic_warning_symbol='⚠'
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 0
    let g:syntastic_check_on_open = 1
    let g:syntastic_loc_list_height = 5
    highlight SyntasticErrorSign guifg=white guibg=black
    "let g:syntastic_check_on_wq = 0
    " [CHECKERS]
        " Python (pyflakes is faster than pylint)
        let g:syntastic_python_checkers=['flake8']
        " Clang
        let g:syntastic_cpp_checkers = ['gcc']
        let g:syntastic_cpp_compiler = 'gcc'
" }

" <ViewDoc>-------------{
    let g:viewdoc_open = 'belowright new' "tabnew|belowright new|topleft new
" }


" <Vim markdown preview>-------------{
    let vim_markdown_preview_github=1
" }

" <Deoplete>--------------{
    " Environment
    "set pyxversion=3  "[error]
    "let g:python3_host_prog = "/usr/local/bin/python3"
    " Close preview window after completion
        autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
    " Max number of candidates
        let g:deoplete#max_abbr_width = 30
        let g:deoplete#max_menu_width = 40
    " Set multiple options
        "call deoplete#custom#option({
        "\ 'candidate_marks': 10,
        "\ 'auto_complete_delay': 0,
        "\ 'smart_case': v:true,
        "\ })
    " Deoplete-jedi
        "let g:deoplete#sources#jedi#enable_typeinfo = 0
        "let g:deoplete#sources#jedi#show_docstring = 0
    " deoplete-clangx
        " Change clang binary path
        "call deoplete#custom#var('clangx', 'clang_binary', '/usr/local/bin/clang')
        " Change clang options
        "call deoplete#custom#var('clangx', 'default_c_options', '')
        "call deoplete#custom#var('clangx', 'default_cpp_options', '')
" }


" <nnn>------------{
    "layout
    let g:nnn#layout = { 'left': '~20%' }
    "disable
    let g:nnn#command = 'DISABLE_FILE_OPEN_ON_NAV=1 nnn -l'
" }


" <SimpylFold>------------{
    "let g:SimpylFold_docstring_preview = 1
" }

" <Autotag>--------------{
    "let g:autotagTagsFile="~/.vim/ctagfiles"
" }

" <Gutentags>--------------{
    " Searching fields (recursively searching from bottom up)
    let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']

    " Tag filename
    let g:gutentags_ctags_tagfile = 'tags'

    " Tag files store place, instead of project dirs
    let s:vim_tags = expand('~/.vim/tags')
    let g:gutentags_cache_dir = s:vim_tags
    " Create tag dir if not exists
    if !isdirectory(s:vim_tags)
       silent! call mkdir(s:vim_tags, 'p')
    endif

    " Ctag command flags
    let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
    let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
    let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
" }

" <Tagbar>--------------{
    let g:tagbar_left = 0  "Show tagbar on right
    let g:tagbar_autofocus = 1   "Focus on tagbar window when open
    let g:tagbar_autoclose = 1   "Close tagbar window when select tag
    "let g:tagbar_autoshowtag = 0
    let g:tagbar_sort = 0
    let g:tagbar_expand = 0
    let g:tagbar_vertical = 20
    "let g:tagbar_singleclick = 1
    let g:tagbar_compact = 1
    "let g:tagbar_autopreview = 1
    "let g:tagbar_previewwin_pos = 'rightbelow'
    "let g:tagbar_indent = 1
    "let g:tagbar_show_visibility = 1
" }


" <Python syntax>------------------{
    let g:python_highlight_all = 1
" }


" <Jedi settings>---------------------{
    let g:jedi#force_py_version=2.7
" }


" <Vim-Indent-Guides>----------------------{
    "let g:indent_guides_enable_on_vim_startup = 1
    "set ts=1 sw=1 et
    "let g:indent_guides_start_level=2
    "let g:indent_guides_size=1
    "hi IndentGuidesOdd  ctermbg=black
    "hi IndentGuidesEven ctermbg=darkgrey
" }


" <Command-T fuzzy search>----------------{
    "let g:CommandTMaxDepth = 10
    "let g:CommandTMaxFiles=2000
    "let g:CommandTSuppressMaxFilesWarning = 1
    "set wildignore+=".*, *.dat, *.o, *.pyc, */.git, *.pdf, *.app, *.jpg, *.png, *.gif, *.doc, *.docx"
" }


" <Fzf fuzzy search>-------------------------{
    "let g:fzf_action = {  }
    " This is the default extra key bindings
    let g:fzf_action = {
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit' ,
      \ 'ctrl-e': 'edit' }

    " Default fzf layout
        " down | up | left | right
        let g:fzf_layout = { 'down': '~40%' }
    " [Buffers] Jump to the existing window if possible
        "let g:fzf_buffers_jump = 1
    " [[B]Commits] Customize the options used by 'git log':
        let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
    " [Tags] Command to generate tags file
        let g:fzf_tags_command = 'ctags -R'
    " [History] -> will block Ctrl-n & Ctrl-p keys
        "let g:fzf_history_dir = '~/.vim/fzf-history'
    " - enew / -tabnew / 10split enew
        "let g:fzf_layout = { 'window': 'enew' }
        "let g:fzf_layout = { 'window': '-tabnew' }
        "let g:fzf_layout = { 'window': '10split enew' }
" }


" <Vim-DimInactive>-----------{
    "let g:diminactive_use_colorcolumn = 2
    "let g:diminactive_use_syntax = 0
" }


" <Status-Line>-----------{
    " @airline
        set t_Co=256 "For Windows
        let g:airline#extensions#tabline#enabled = 1  "Enable airline
        let g:airline_powerline_fonts=1 "Essential
        set laststatus=2  "2:always show
        let g:airline_left_sep = '▶'
        let g:airline_left_alt_sep = '❯'
        let g:airline_right_sep = '◀'
        let g:airline_right_alt_sep = '❮'
        " @airline-extension-theme
            let g:airline_theme='bubblegum' "Default
            "let g:airline_theme='gruvbox'  "grubox|deus|badwolf|solarized
        " @airline-extensions-tabline-tabs
            let g:airline#extensions#tabline#switch_buffers_and_tabs=0
            let g:airline#extensions#tabline#enabled=1  "enable tabline
            let g:airline#extensions#tabline#tabs_label='TABS'
            let g:airline#extensions#tabline#show_tab_nr=0 "enable tag number
            let g:airline#extensions#tabline#tab_nr_type=1 "Numbers shown
            "-> default|unique_tail|unique_tail_improved
            let g:airline#extensions#tabline#formatter='unique_tail'
            "let g:airline#extensions#tabline#left_sep = ' '  "separater
            "let g:airline#extensions#tabline#left_alt_sep = '|'  "separater
        " @airline-extension-tabline-buffers
            let g:airline#extensions#tabline#show_buffers=1
            let g:airline#extensions#tabline#buffers_label='BUFFERS'
            let g:airline#extensions#tabline#buffer_nr_show=0
            let g:airline#extensions#tabline#buffer_idx_mode=0
            "let g:airline#extensions#tabline#buffer_idx_format={}
        " @airline-extensions-tabline-splits
            let g:airline#extensions#tabline#show_splits=1 "show split
    " @lightline
        "set laststatus=2 " startup the lightline.vim
        "let g:lightline = { 'colorscheme': 'powerline', }
        "set status-line's color scheme
    " @powerline
        "set laststatus=2
        "set t_Co=256
        "let g:Powerline_symbols= 'unicode'
        "set encoding=utf8
" }


" <NerdCommenter>------------------{
    "" Add spaces after comment delimiters by default
    "let g:NERDSpaceDelims = 1
    "" Use compact syntax for prettified multi-line comments
    "let g:NERDCompactSexyComs = 1
    "" Align line-wise comment delimiters flush left instead of following code indentation
    "let g:NERDDefaultAlign = 'left'
    "" Set a language to use its alternate delimiters by default
    "let g:NERDAltDelims_java = 1
    "" Add your own custom formats or override the defaults
    "let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
    "" Allow commenting and inverting empty lines (useful when commenting a region)
    "let g:NERDCommentEmptyLines = 1
    "" Enable trimming of trailing whitespace when uncommenting
    "let g:NERDTrimTrailingWhitespace = 1
    "" Enable NERDCommenterToggle to check all selected lines is commented or not
    "let g:NERDToggleCheckAllLines = 1
" }


" <Nerdtree>-------------------{
    ">> Basic settings
        let g:NERDTreeChDirMode = 2  "Change current folder as root
        "autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) |cd %:p:h |endif

    ">> UI settings
        let NERDTreeQuitOnOpen=1   " Close NERDtree when files was opened
        let NERDTreeMinimalUI=1    " Start NERDTree in minimal UI mode (No help lines)
        let NERDTreeDirArrows=1    " Display arrows instead of ascii art in NERDTree
        let NERDTreeChDirMode=2    " Change current working directory based on root directory in NERDTree
        let g:NERDTreeHidden=1     " Don't show hidden files
        let NERDTreeWinSize=30     " Initial NERDTree width
        let NERDTreeAutoDeleteBuffer = 1  " Auto delete buffer deleted with NerdTree
        "let NERDTreeShowBookmarks=0   " Show NERDTree bookmarks
        let NERDTreeIgnore = ['\.pyc$', '\.swp', '\.swo', '__pycache__']   " Hide temp files in NERDTree
        "let g:NERDTreeShowLineNumbers=1  " Show Line Number
    " Open Nerdtree when there's no file opened
        "autocmd vimenter * if !argc()|NERDTree|endif
    " Or, auto-open Nerdtree
        "autocmd vimenter * NERDTree
    " Close NERDTree when there's no other windows
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    " Customize icons on Nerdtree
        let g:NERDTreeDirArrowExpandable = '▸'
        let g:NERDTreeDirArrowCollapsible = '▾'

    ">> NERDTREE-GIT
        " Special characters
    let g:NERDTreeIndicatorMapCustom = {
        \ "Modified"  : "✹",
        \ "Staged"    : "✚",
        \ "Untracked" : "✭",
        \ "Renamed"   : "➜",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "✖",
        \ "Dirty"     : "✗",
        \ "Clean"     : "✔︎",
        \ 'Ignored'   : '☒',
        \ "Unknown"   : "?"
    \ }

    ">> NERDTree-Tabs
        "let g:nerdtree_tabs_open_on_console_startup=1 "Auto-open Nerdtree-tabs on VIM enter
    ">> Nerdtree-devicons
        "set guifont=DroidSansMono_Nerd_Font:h11
    ">> Nerdtree-syntax-highlighting
        "let g:NERDTreeDisableFileExtensionHighlight = 1
        "let g:NERDTreeDisableExactMatchHighlight = 1
        "let g:NERDTreeDisablePatternMatchHighlight = 1
        "let g:NERDTreeFileExtensionHighlightFullName = 1
        "let g:NERDTreeExactMatchHighlightFullName = 1
        "let g:NERDTreePatternMatchHighlightFullName = 1
        "let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
        "let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
        "let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
" }



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"=======================HISTORICAL ABANDONED LOADING===========================
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"" [  Plugins Manager vim-plug  ]
"call plug#begin('~/.vim/plugged')
    " [  Historical Abandoned Plugins  ]
        "Window
            "Plug 'blueyed/vim-diminactive'  "not dim Indent lines
        "Folding
            "Plug 'tmhedberg/SimpylFold'   "improving folding
        "Completion
            "Plug 'valloric/youcompleteme'    "hard to build
            "Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}   "not working
            "Plug 'rkulla/pydiction'   " not work as expected
            "Plug 'ervandew/supertab'
            "Plug 'davidhalter/jedi-vim'  "complicated
            "Plug 'lifepillar/vim-mucomplete'  "tab. sources complicated
        "Indentation
            "Plug 'nathanaelkane/vim-indent-guides'
        "Brackets
            "Plug 'tpope/vim-surround'  "Barely working
            "Plug 'Townk/vim-autoclose' "Fair, but not working for some files
        "Snippets
            "Plug 'MarcWeber/vim-addon-mw-utils'
            "Plug 'tomtom/tlib_vim'
            "Plug 'garbas/vim-snipmate'
            "Plug 'honza/vim-snippets' "some common snippets (python required)
        "Git
            "Plug 'tpope/vim-fugitive'    "Commands to do Git
            "Plug 'easymotion/vim-easymotion'
        "Markdown
            "Plug 'JamshedVesuna/vim-markdown-preview' "Not live previewing
        "File Browsing
            "Plug 'Xuyuanp/nerdtree-git-plugin'  " display git status within Nerdtree
            "Plug 'tiagofumo/vim-nerdtree-syntax-highlight' " enhance devicons
            "Plug 'wincent/command-t'    "VIM only (Ruby required)
            "Plug 'justinmk/vim-dirvish'  "Netrw enhancement
        "Color Scheme
            "Plug 'chriskempson/base16-vim'   "Ugly !!
            "Plug 'jpo/vim-railscasts-theme'  "Ugly !
            "Plug 'NLKNguyen/papercolor-theme'   "No python support
        "Status Bar
            "Plug 'itchyny/lightline.vim' "beautiful status line
            "Plug 'Lokaltog/vim-powerline' "fancy status line (python required)
        "Syntax Highlighting
            "Plug 'vim-python/python-syntax'
            "Plug 'vitiral/vim-python'  "Not working
            "Plug 'numirias/semshi'    "Not working
            "Plug 'pfdevilliers/Pretty-Vim-Python'   "not working
            "-> Python-mode: (More errors, too many builtin plugins)
            "Plug 'python-mode/python-mode'    "Deprecated
            "Plug 'python-mode/python-mode', { 'branch': 'develop' }
"call plug#end()
