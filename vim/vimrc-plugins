" -------------[ STANDARD VIMRC ]---------------
"
" MAINTAINER: Solomon Xie <solomonxiewise@gmail>
" Enviroment: MacOS Sierra / Raspbian / Ubuntu
"
" Dependencies:
"     " [Plugins Manager: Vim-Plug]
"       $ curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"           https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"     " [Plug  dependencies]
"       $ brew install ctags
"       $ brew install --HEAD universal-ctags/universal-ctags/universal-ctags
"
" Commands:
"     - Install plugins: ":PlugInstall"
"     - Check current filetype: ":echo &filetype"
"     - Build current file: "Ctrl-u"


" [  Plugins Manager vim-plug  ]
call plug#begin('~/.vim/plugged')
    " [    UI / Appearence     ]

        "<STATUS-BAR>
            Plug 'vim-airline/vim-airline'
            Plug 'vim-airline/vim-airline-themes'

        "<Syntax Highlighting>
            Plug 'vim-syntastic/syntastic' "Syntax checker for all languages
            Plug 'hdima/python-syntax'   "Most stable highlighting

        "<Window>

    " [    Browsing   ]

        "<Fuzzy File Search>
            " <fzf>
            Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
            Plug 'junegunn/fzf.vim'

            "<NetRW>
            Plug 'tpope/vim-vinegar'      "Netrw enhancement

        "<NERDTREE>
            Plug 'scrooloose/nerdtree'          " File tree manager
            Plug 'jistr/vim-nerdtree-tabs'      " enhance nerdtree's tabs
            Plug 'ryanoasis/vim-devicons'       " add beautiful icons besides files

        "<Tags>
            Plug 'majutsushi/tagbar'   " (ctags required)

        "<Git>
            Plug 'jreybert/vimagit'  "Much easier with Git

    " [   INSERTION    ]

        "<Autocomplete>
            "[Snippets]  -> Python required
                Plug 'SirVer/ultisnips', {'on':['InsertEnter']} " Track the engine.
                Plug 'honza/vim-snippets' " Snippets are separated from the engine.
            "[Deoplete]
                Plug 'Shougo/deoplete.nvim'
                Plug 'roxma/vim-hug-neovim-rpc'  ">> VIM only
                Plug 'roxma/nvim-yarp'    " Yet Another Remote Plugin Framework for Neovim
                Plug 'zchee/deoplete-jedi'    " Python completion source
                Plug 'Shougo/deoplete-clangx'   " C/C++ completion source

            "[Comment]
            Plug 'scrooloose/nerdcommenter'

        "<Bracket Closing>
            Plug 'jiangmiao/auto-pairs' "Smartest

        "<Indentation>
            Plug  'Yggdroot/indentLine'    "Beautiful indent lines

    " [   SESSION    ]
        Plug 'tpope/vim-obsession'  "For Tmux to restore VIM sessions

    " [   PERFORMANCE    ]
        Plug 'tweekmonster/startuptime.vim'   "VIM loading analysis

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"==============================LAZY LOADING=================================
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" [  Lazy Load Plugins  ]-----------{
    "<UltiSnips>  -> Very slow
    augroup load_us
        autocmd!
        autocmd InsertEnter * call plug#load('ultisnips') | autocmd! load_us
    augroup END
" }


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"==============================PLUGIN SETTINGS=================================
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



" <Vim Obsession>--------{
    " Auto record session on VIM's exit (No space between multiple files)
        "autocmd VimLeave * :Obsession /tmp/obsession.vim
        "autocmd VimLeave *.py,*.json :Obsession /tmp/obsession.vim
        function! AutoObsession()
            if bufnr('%') >= 3
                :Obsession /tmp/obsession.vim
            endif
        endfunction
        autocmd VimLeave * call AutoObsession()
" }

" <UltiSnips>--------{
    " Trigger configuration.
    " Do not use <tab> if you use YouCompleteMe.
    let g:UltiSnipsExpandTrigger="<Tab>"
    let g:UltiSnipsJumpForwardTrigger="<C-n>"
    let g:UltiSnipsJumpBackwardTrigger="<C-p>"

    " If you want :UltiSnipsEdit to split your window.
    let g:UltiSnipsEditSplit="vertical"

    " Specify snippets locations
    let g:UltiSnipsSnippetDirectories=["~/.vim/bundle/ultisnips/UltiSnips","~/dotfiles/snippets"]
" }


" <Indentline>--------{
    let g:indentLine_enabled = 1
    let g:indentLine_char='│'
    let g:indentLine_conceallevel = 2
    let g:indentLine_color_term = 239
    let g:indentLine_concealcursor = 'inc'
    "let g:indentLine_setColors = 0
    "let g:indentLine_setConceal = 0
    autocmd Filetype json let g:indentLine_enabled = 0  ">> Huge bug for JSON input
" }


" <PyDiction>-------------{
    "let g:pydiction_location = '$HOME/.vim/plugged/pydiction/complete-dict'
    "let g:pydiction_menu_height = 7
" }

" <Vim markdown preview>-------------{
    let vim_markdown_preview_github=1
" }

" <Deoplete>--------------{
    " Enable at startup
        let g:deoplete#enable_at_startup = 1
    " Set multiple options
        call deoplete#custom#option({
        \ 'auto_complete_delay': 0,
        \ 'smart_case': v:true,
        \ })
    " Deoplete-jedi
        let g:deoplete#sources#jedi#enable_typeinfo = 0
        let g:deoplete#sources#jedi#show_docstring = 0
    " deoplete-clangx
        " Change clang binary path
        "call deoplete#custom#var('clangx', 'clang_binary', '/usr/local/bin/clang')
        " Change clang options
        "call deoplete#custom#var('clangx', 'default_c_options', '')
        "call deoplete#custom#var('clangx', 'default_cpp_options', '')
" }


" <SimpylFold>------------{
    "let g:SimpylFold_docstring_preview = 1
" }


" <Tagbar>--------------{
    set tags=tags  "Plugin: Ctags
    let g:tagbar_left = 0  "Show tagbar on right
    let g:tagbar_autofocus = 1   "Focus on tagbar window when open
    let g:tagbar_autoclose = 1   "Close tagbar window when select tag
    "let g:tagbar_autoshowtag = 0
    "let g:tagbar_expand = 0
    "let g:tagbar_singleclick = 1
    "let g:tagbar_compact = 1
    "let g:tagbar_indent = 1
    "let g:tagbar_show_visibility = 1
" }


" <Python syntax>------------------{
    let g:python_highlight_all = 1
" }


" <Jedi settings>---------------------{
    let g:jedi#force_py_version=2.7
" }


" <Vim-Indent-Guides>----------------------{
    "let g:indent_guides_enable_on_vim_startup = 1
    "set ts=1 sw=1 et
    "let g:indent_guides_start_level=2
    "let g:indent_guides_size=1
    "hi IndentGuidesOdd  ctermbg=black
    "hi IndentGuidesEven ctermbg=darkgrey
" }


" <Command-T fuzzy search>----------------{
    "let g:CommandTMaxDepth = 10
    "let g:CommandTMaxFiles=2000
    "let g:CommandTSuppressMaxFilesWarning = 1
    "set wildignore+=".*, *.dat, *.o, *.pyc, */.git, *.pdf, *.app, *.jpg, *.png, *.gif, *.doc, *.docx"
" }


" <Fzf fuzzy search>-------------------------{
    "let g:fzf_action = { 'ctrl-e': 'edit' }
    " Default fzf layout
        " - down / up / left / right
        let g:fzf_layout = { 'down': '~40%' }
    " In Neovim, you can set up fzf window using a Vim command
    " - enew / -tabnew / 10split enew
        "let g:fzf_layout = { 'window': 'enew' }
        "let g:fzf_layout = { 'window': '-tabnew' }
        "let g:fzf_layout = { 'window': '10split enew' }
" }


" <Vim-DimInactive>-----------{
    "let g:diminactive_use_colorcolumn = 2
    "let g:diminactive_use_syntax = 0
" }


" <Status-Line>-----------{
    " @airline
        set t_Co=256      "在windows中用xshell连接打开vim可以显示色彩
        let g:airline#extensions#tabline#enabled = 1   " 是否打开tabline
    "这个是安装字体后 必须设置此项"
        let g:airline_powerline_fonts = 1
        set laststatus=2  "永远显示状态栏
        let g:airline_theme='bubblegum' "选择主题
        let g:airline#extensions#tabline#enabled=1  "显示窗口tab和buffer
        "let g:airline#extensions#tabline#left_sep = ' '  "separater
        "let g:airline#extensions#tabline#left_alt_sep = '|'  "separater
        "let g:airline#extensions#tabline#formatter = 'default'  "formater
        let g:airline_left_sep = '▶'
        let g:airline_left_alt_sep = '❯'
        let g:airline_right_sep = '◀'
        let g:airline_right_alt_sep = '❮'
        "let g:airline_symbols.linenr = '¶'
        "let g:airline_symbols.branch = '⎇'
    " @lightline
        "set laststatus=2 " startup the lightline.vim
        "let g:lightline = { 'colorscheme': 'powerline', }
        "set status-line's color scheme
    " @powerline
        "set laststatus=2
        "set t_Co=256
        "let g:Powerline_symbols= 'unicode'
        "set encoding=utf8
" }


" <NerdCommenter>------------------{
    "" Add spaces after comment delimiters by default
    "let g:NERDSpaceDelims = 1
    "" Use compact syntax for prettified multi-line comments
    "let g:NERDCompactSexyComs = 1
    "" Align line-wise comment delimiters flush left instead of following code indentation
    "let g:NERDDefaultAlign = 'left'
    "" Set a language to use its alternate delimiters by default
    "let g:NERDAltDelims_java = 1
    "" Add your own custom formats or override the defaults
    "let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
    "" Allow commenting and inverting empty lines (useful when commenting a region)
    "let g:NERDCommentEmptyLines = 1
    "" Enable trimming of trailing whitespace when uncommenting
    "let g:NERDTrimTrailingWhitespace = 1
    "" Enable NERDCommenterToggle to check all selected lines is commented or not
    "let g:NERDToggleCheckAllLines = 1
" }


" <Nerdtree>-------------------{
    ">> Basic settings
        let g:NERDTreeChDirMode = 2  "Change current folder as root
        autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) |cd %:p:h |endif

    ">> UI settings
        let NERDTreeQuitOnOpen=1   " Close NERDtree when files was opened
        let NERDTreeMinimalUI=1    " Start NERDTree in minimal UI mode (No help lines)
        let NERDTreeDirArrows=1    " Display arrows instead of ascii art in NERDTree
        let NERDTreeChDirMode=2    " Change current working directory based on root directory in NERDTree
        let g:NERDTreeHidden=1     " 不显示隐藏文件
        let NERDTreeWinSize=30     " Initial NERDTree width
        let NERDTreeAutoDeleteBuffer = 1  " Auto delete buffer deleted with NerdTree
        "let NERDTreeShowBookmarks=0   " Show NERDTree bookmarks
        let NERDTreeIgnore = ['\.pyc$', '\.swp', '\.swo', '__pycache__']   " Hide temp files in NERDTree
        "let g:NERDTreeShowLineNumbers=1  " 显示菜单上行号
    " 打开vim时如果没有文件自动打开NERDTree
        "autocmd vimenter * if !argc()|NERDTree|endif
    " 或, 自动开启Nerdtree
        "autocmd vimenter * NERDTree
    " 当NERDTree为剩下的唯一窗口时自动关闭
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    " 设置树的显示图标
        let g:NERDTreeDirArrowExpandable = '▸'
        let g:NERDTreeDirArrowCollapsible = '▾'

    ">> NERDTREE-GIT
    let g:NERDTreeIndicatorMapCustom = {
        \ "Modified"  : "✹",
        \ "Staged"    : "✚",
        \ "Untracked" : "✭",
        \ "Renamed"   : "➜",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "✖",
        \ "Dirty"     : "✗",
        \ "Clean"     : "✔︎",
        \ 'Ignored'   : '☒',
        \ "Unknown"   : "?"
    \ }

    ">> NERDTree-Tabs
        "let g:nerdtree_tabs_open_on_console_startup=1 "设置打开vim的时候默认打开tabs
    ">> Nerdtree-devicons
        "set guifont=DroidSansMono_Nerd_Font:h11
    ">> Nerdtree-syntax-highlighting
        "let g:NERDTreeDisableFileExtensionHighlight = 1
        "let g:NERDTreeDisableExactMatchHighlight = 1
        "let g:NERDTreeDisablePatternMatchHighlight = 1
        "let g:NERDTreeFileExtensionHighlightFullName = 1
        "let g:NERDTreeExactMatchHighlightFullName = 1
        "let g:NERDTreePatternMatchHighlightFullName = 1
        "let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
        "let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
        "let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
" }



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"=======================HISTORICAL ABANDONED LOADING===========================
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"" [  Plugins Manager vim-plug  ]
"call plug#begin('~/.vim/plugged')
    " [  Historical Abandoned Plugins  ]
        "Window
            "Plug 'blueyed/vim-diminactive'  "not dim Indent lines
        "Folding
            "Plug 'tmhedberg/SimpylFold'   "improving folding
        "Completion
            "Plug 'valloric/youcompleteme'    "hard to build
            "Plug 'davidhalter/jedi-vim'      "complicated, need to work with others
            "Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}   "not working
            "Plug 'rkulla/pydiction'   " not work as expected
            "Plug 'ervandew/supertab'
        "Indentation
            "Plug 'nathanaelkane/vim-indent-guides'
        "Brackets
            "Plug 'tpope/vim-surround'  "Barely working
            "Plug 'Townk/vim-autoclose' "Fair, but not working for some files
        "Snippets
            "Plug 'MarcWeber/vim-addon-mw-utils'
            "Plug 'tomtom/tlib_vim'
            "Plug 'garbas/vim-snipmate'
            "Plug 'honza/vim-snippets' "some common snippets (python required)
        "Git
            "Plug 'tpope/vim-fugitive'    "Commands to do Git
            "Plug 'easymotion/vim-easymotion'
        "Markdown
            "Plug 'JamshedVesuna/vim-markdown-preview' "Not live previewing
        "File Browsing
            "Plug 'Xuyuanp/nerdtree-git-plugin'  " display git status within Nerdtree
            "Plug 'tiagofumo/vim-nerdtree-syntax-highlight' " enhance devicons
            "Plug 'wincent/command-t'    "VIM only (Ruby required)
            "Plug 'justinmk/vim-dirvish'  "Netrw enhancement
        "Color Scheme
            "Plug 'chriskempson/base16-vim'   "Ugly !!
            "Plug 'jpo/vim-railscasts-theme'  "Ugly !
            "Plug 'NLKNguyen/papercolor-theme'   "No python support
        "Status Bar
            "Plug 'itchyny/lightline.vim' "beautiful status line
            "Plug 'Lokaltog/vim-powerline' "fancy status line (python required)
        "Syntax Highlighting
            "Plug 'vim-python/python-syntax'
            "Plug 'vitiral/vim-python'  "Not working
            "Plug 'numirias/semshi'    "Not working
            "Plug 'pfdevilliers/Pretty-Vim-Python'   "not working
            "-> Python-mode: (More errors, too many builtin plugins)
            "Plug 'python-mode/python-mode'    "Deprecated
            "Plug 'python-mode/python-mode', { 'branch': 'develop' }
"call plug#end()
