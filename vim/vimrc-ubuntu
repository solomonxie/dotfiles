" Owner: Solomon Xie
" Email: solomonxiewise@gmail.com
" Enviroment: MacOS Sierra
" Preload dependencies:
"     $ sudo git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
"     $ sudo wget https://raw.githubusercontent.com/morhetz/gruvbox/master/colors/gruvbox.vim -O ~/.vim/colors/gruvbox.vim
" Manual commands (type in vim, sodu mode required):
"     :PluginInstall
"
"
" [VUNDLE DIFINITIONS MUST BE ON THE TOP]
set nocompatible   " be iMproved, required
filetype off " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
    Plugin 'VundleVim/Vundle.vim'
    " == Satus line ==
    "Plugin 'itchyny/lightline.vim' "beautiful status line
    "Plugin 'Lokaltog/vim-powerline' "fancy status line (python needed)
    Plugin 'vim-airline/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'
    " == Git ==
    "Plugin 'tpope/vim-fugitive'    " easy commands to do git
    " == File Tree ==
    Plugin 'scrooloose/nerdtree'          " File tree manager
    Plugin 'Xuyuanp/nerdtree-git-plugin'  " display git status within Nerdtree
    Plugin 'jistr/vim-nerdtree-tabs'      " enhance nerdtree's tabs
    Plugin 'ryanoasis/vim-devicons'       " add beautiful icons besides files
    "Plugin 'tiagofumo/vim-nerdtree-syntax-highlight' " enhance devicons
    " == Snippets (Python required) ==
    Plugin 'MarcWeber/vim-addon-mw-utils'
    Plugin 'tomtom/tlib_vim'
    Plugin 'garbas/vim-snipmate'
    "Plugin 'honza/vim-snippets' "some common snippets (python)
    " == Search tools ==
    "Plugin 'easymotion/vim-easymotion'
    " == Syntax ==
    "Plugin 'vim-syntastic/syntastic'
    " == Surround ==
    "Plugin 'tpope/vim-surround'
call vundle#end()            " required
filetype plugin indent on    " required


" General Settings ==================={{{
    colorscheme gruvbox 
    syntax enable 
    set background=dark
    set hidden " 设置Buffer缓冲区允许不保存时切换buffer
    set number "show line number
    set cursorline "highlight current line with cursor on
    set mouse=a  "设置鼠标滚动为All，即在tmux中的vim也能滚动 （但是选中文字自动会进入Visual模式）
    "set paste   "设置可以直接用ctrl+c ctrl+v复制粘贴 其实没什么区别 只不过不用在insert模式而已
    set showcmd " show keypress at right-bottom
    set backspace=2 "backspace over everything in insert mode
    "set autoindent "换行时自动缩排 同时对应的还有其它两种模式 smartindent, cindent
    set tabstop=4 "设定tab宽度为4个字符
    set shiftwidth=4 "设定自动缩进为4个字符
    set expandtab "用space替代tab的输入 取消的话 就用set noexpandtab "不用space替代tab的输入
    set encoding=utf8  "设置默认编码
    retab "打开文件时自动转换所有tab为空格
" }}}

" Key Mapping ================{{{
    "--Leader key--
    let mapleader = ','
    " Escape key
    inoremap <C-c> <Esc>:nohl<CR>
    nnoremap <C-c> <ESC>:nohl<CR>
    " 复制到系统剪切板
    nnoremap <leader>y "+Y
    vnoremap <leader>y "+y
    " 从系统剪切板中粘贴到当前位置
    nnoremap <leader>p "+P
    vnoremap <leader>p "+p
    " vim自带的自动补全Autocomplete
    inoremap <C-d> <C-x><C-l>
    "--Airline--
    nnoremap <C-h> :bp<CR>
    nnoremap <C-l> :bn<CR>
    nnoremap <leader>q :bd<CR>
    "--Nerdtree--
    " 将焦点放在树上（无论何种情况）
    nnoremap <leader>f :NERDTreeFocus<CR>
    " 开/关文件菜单
    nnoremap <C-f> :NERDTreeToggle<CR>  
    " 向右向左切换tab
    "nnoremap <leader>l gt
    "nnoremap <leader>h gT
    " 按leader+t 打开新tab
    "nnoremap <leader>t :tabe<CR>
    " 按leader+q 关闭当前tab
    "nnoremap <leader>c :tabc
    "--Autocomplete--
    "inoremap ' ''<Esc>i
    "inoremap " ""<Esc>i
    "inoremap ( ()<Esc>i
    "inoremap [ []<Esc>i
    "inoremap { {}<Esc>i
" }}}



" Search Highlighting -----------{{{
    highlight Search guibg='Purple' guifg='NONE'
    highlight IncSearch gui=underline,bold guifg=White guibg=Red3
    "highlight IncSearch ctermbg=black ctermfg=yellow 
    " 鼠标无动作时取消高亮
    autocmd cursorhold * set nohlsearch
    " 当输入查找命令时，再启用高亮
    noremap n :set hlsearch<cr>n
    noremap N :set hlsearch<cr>N
    noremap / :set hlsearch<cr>/
    noremap ? :set hlsearch<cr>?
    noremap * *:set hlsearch<cr>
    " 括号匹配自动高亮
    "highlight MatchParen cterm=underline ctermbg=NONE ctermfg=NONE"
" }}}


" Status Line ========== {{{
    " @airline
    set t_Co=256      "在windows中用xshell连接打开vim可以显示色彩
    let g:airline#extensions#tabline#enabled = 1   " 是否打开tabline
    "这个是安装字体后 必须设置此项" 
    let g:airline_powerline_fonts = 1
    set laststatus=2  "永远显示状态栏
    let g:airline_theme='bubblegum' "选择主题
    let g:airline#extensions#tabline#enabled=1  "显示窗口tab和buffer
    "let g:airline#extensions#tabline#left_sep = ' '  "separater
    "let g:airline#extensions#tabline#left_alt_sep = '|'  "separater
    "let g:airline#extensions#tabline#formatter = 'default'  "formater
    let g:airline_left_sep = '▶'
    let g:airline_left_alt_sep = '❯'
    let g:airline_right_sep = '◀'
    let g:airline_right_alt_sep = '❮'
    "let g:airline_symbols.linenr = '¶'
    "let g:airline_symbols.branch = '⎇'
    " @lightline
    "set laststatus=2 " startup the lightline.vim 
    "let g:lightline = { 'colorscheme': 'powerline', } "set status-line's color scheme
    " @powerline
    "set laststatus=2
    "set t_Co=256
    "let g:Powerline_symbols= 'unicode'
    "set encoding=utf8
" }}} 



" Swap files (for recovery) --------{{{
    set swapfile    "enable swap file
    set directory=/tmp    "set swp file directory. 
    set updatecount=20     "save swp file every amount of characters
    " ▼ update also check cursor-holds and other functions, bit expensive one.
    set updatetime=4000   "save swap file every amount of ms
" }}}



" Nerdtree =================================={{{
    "let g:NERDTreeWinSize = 25 "设定 NERDTree 视窗大小
    "let NERDTreeShowBookmarks=1  " 开启Nerdtree时自动显示Bookmarks
    " 自动开启Nerdtree
    "autocmd vimenter * NERDTree  
    " 从nerdtree上打开文件后菜单自动关闭
    let NERDTreeQuitOnOpen=1
    "打开vim时如果没有文件自动打开NERDTree
    autocmd vimenter * if !argc()|NERDTree|endif
    "当NERDTree为剩下的唯一窗口时自动关闭
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    " 不显示隐藏文件
    let g:NERDTreeHidden=1
    " 过滤: 所有.pyc文件不显示
    let NERDTreeIgnore = ['\.pyc$', '\.swp', '\.swo', '\.vscode', '__pycache__']  
    " 美化菜单 不显示多余的东西
    let NERDTreeMinimalUI = 1
    let NERDTreeDirArrows = 1
    "设置树的显示图标
    let g:NERDTreeDirArrowExpandable = '▸'
    let g:NERDTreeDirArrowCollapsible = '▾'
    "let g:NERDTreeShowLineNumbers=1  " 显示菜单上行号

    "NERDTREE-GIT
    let g:NERDTreeIndicatorMapCustom = {
        \ "Modified"  : "✹",
        \ "Staged"    : "✚",
        \ "Untracked" : "✭",
        \ "Renamed"   : "➜",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "✖",
        \ "Dirty"     : "✗",
        \ "Clean"     : "✔︎",
        \ 'Ignored'   : '☒',
        \ "Unknown"   : "?"
    \ }

    "NERDTree-Tabs
    "let g:nerdtree_tabs_open_on_console_startup=1 "设置打开vim的时候默认打开tabs
    "Nerdtree-devicons
    "set guifont=DroidSansMono_Nerd_Font:h11
    "Nerdtree-syntax-highlighting
    "let g:NERDTreeDisableFileExtensionHighlight = 1
    "let g:NERDTreeDisableExactMatchHighlight = 1
    "let g:NERDTreeDisablePatternMatchHighlight = 1
    "let g:NERDTreeFileExtensionHighlightFullName = 1
    "let g:NERDTreeExactMatchHighlightFullName = 1
    "let g:NERDTreePatternMatchHighlightFullName = 1
    "let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
    "let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
    "let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
" }}}
